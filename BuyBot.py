import asyncio
import logging
from random import randint
from aiogram import Bot, Dispatcher, types
from yoomoney import Quickpay, Client

def len(self):
    counter=0
    for sub in self.operations:
        counter+=1
    return counter 

logging.basicConfig(level=logging.INFO)

TOKEN_TG = 'YOUR TOKEN'
TOKEN_YOO = 'YOUR TOKEN'

Label = None
if Label is None:
    Label=randint(-10e16,10e16)

client = Client(TOKEN_YOO)
bot = Bot(token=TOKEN_TG)
dp = Dispatcher(bot)
quickpay_privat = Quickpay(
    receiver="YOUR ACCOUNT",
    quickpay_form="shop",
    targets="–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É",
    paymentType="SB",
    sum=2000,
    label=Label
)
quickpay_vip = Quickpay(
    receiver="YOUR ACCOUNT",
    quickpay_form="shop",
    targets="–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É",
    paymentType="SB",
    sum=1000,
    label=Label
)


@dp.message_handler(commands="start")
async def command_start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text='üí∞–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø'),
            types.KeyboardButton(text='‚öôÔ∏è–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    )
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª Eva Gold! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–∞–Ω–∞–ª. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"',
        reply_markup=keyboard
    )


@dp.message_handler(text='üí∞–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø')
async def buying_access(message: types.Message):
    if len(client.operation_history(label=Label)) == 0:
        kb = [
            [types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—åü§ë', url=quickpay_privat.base_url)]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await message.answer(
            '–ö –æ–ø–ª–∞—Ç–µ 2000 —Ä—É–±–ª–µ–π.\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å".',
            reply_markup=keyboard
        )
        kb = [
            [types.KeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É‚úÖ'),
             types.KeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
             ]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ –í–∞–º –ø—Ä–∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª.\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=keyboard
        )
    elif len(client.operation_history(label=Label)) == 1:
        kb = [
            [types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—åü§ë', url=quickpay_vip.base_url)]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await message.answer(
            '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VIP –∫–∞–Ω–∞–ª—É –∑–∞ 1000 —Ä—É–±–ª–µ–π.',
            reply_markup=keyboard
        )
        kb = [
            [types.KeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è')]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(
            '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=keyboard
        )
    elif len(client.operation_history(label=Label)) == 2:
        kb = [
            [types.KeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è')]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(
            '–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞!',
            reply_markup=keyboard
        )


@dp.message_handler(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É‚úÖ')
async def Check_operation(message: types.Message):
    if len(client.operation_history(label=Label)) == 0:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"'
        )
    elif len(client.operation_history(label=Label)) == 1:
        kb = [
            [types.InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url='YOUR TG-CHANNEL')]
        ]
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=kb
        )
        await message.answer(
            '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n –ù–∞–∂–º–∏—Ç–µ "–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É.',
            reply_markup=keyboard
        )
        kb = [
            [types.KeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è')]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(
            '–ê —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –≤ VIP –∫–∞–Ω–∞–ª –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø" –µ—â–µ —Ä–∞–∑.\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥", –∑–∞—Ç–µ–º "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"',
            reply_markup=keyboard
        )
    elif len(client.operation_history(label=Label)) == 2:
        kb = [
            [types.InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url='YOUR TG-CHANNEL')]
        ]
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=kb
        )
        await message.answer(
            '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n –ù–∞–∂–º–∏—Ç–µ "–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É.',
            reply_markup=keyboard
        )


@dp.message_handler(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
async def back(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text='üí∞–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø'),
            types.KeyboardButton(text='‚öôÔ∏è–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    )
    await message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=keyboard
    )


@dp.message_handler(text='‚öôÔ∏è–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
async def repair(message: types.Message):
    kb = [
        [types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å', url='YOUR TG-ACCOUNT')]
    ]
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=kb
    )
    await message.answer(
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å" –∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–ø–æ—Ä–æ—Å.',
        reply_markup=keyboard
    )
    kb = [
        [types.KeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è')]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer(
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=keyboard
    )


@dp.message_handler()
async def none(message: types.Message):
    await message.answer(
        '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é'
    )


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
